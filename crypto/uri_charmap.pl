#! /usr/bin/env perl
# Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
#
# Licensed under the OpenSSL license (the "License").  You may not use
# this file except in compliance with the License.  You can obtain a copy
# in the file LICENSE in the source distribution or at
# https://www.openssl.org/source/license.html

use strict;

my ($i, @arr);

# Set up an array with the type of ASCII characters for URI decoding
# Each set bit represents a character property.

# RFC3986 character properties
my $ALPHA         = 0x0001;     # a-zA-Z
my $DIGIT         = 0x0002;     # 0-9
my $HEXDIG        = 0x0004;     # 0-9a-fA-F
my $unreserved    = 0x0008;     # ALPHA / DIGIT / "-" / "." / "_" / "~"
my $reserved      = 0x0030;     # gen-delims / sub-delims
my $gen_delims    = 0x0010;     # ":" / "/" / "?" / "#" / "[" / "]" / "@"
my $sub_delims    = 0x0020;     # "!" / "$" / "&" / "'" / "(" / ")"
                                # / "*" / "+" / "," / ";" / "="

for($i = 0; $i < 128; $i++) {
    $arr[$i] = 0;

    if (    $i >= ord('a') && $i <= ord('z')
         || $i >= ord('A') && $i <= ord('Z') ) {
        $arr[$i] |= $unreserved | $ALPHA;
    }
    if ( $i >= ord('0') && $i <= ord('9') ) {
        $arr[$i] |= $unreserved | $HEXDIG | $DIGIT;
    }
    if (    $i >= ord('a') && $i <= ord('f')
         || $i >= ord('A') && $i <= ord('F') ) {
        $arr[$i] |= $HEXDIG;
    }
}

$arr[ord('-')] |= $unreserved;
$arr[ord('.')] |= $unreserved;
$arr[ord('_')] |= $unreserved;
$arr[ord('~')] |= $unreserved;

$arr[ord(':')] |= $gen_delims;
$arr[ord('/')] |= $gen_delims;
$arr[ord('?')] |= $gen_delims;
$arr[ord('#')] |= $gen_delims;
$arr[ord('[')] |= $gen_delims;
$arr[ord(']')] |= $gen_delims;
$arr[ord('@')] |= $gen_delims;

$arr[ord('!')] |= $sub_delims;
$arr[ord('$')] |= $sub_delims;
$arr[ord('&')] |= $sub_delims;
$arr[ord("'")] |= $sub_delims;
$arr[ord('(')] |= $sub_delims;
$arr[ord(')')] |= $sub_delims;
$arr[ord('*')] |= $sub_delims;
$arr[ord('+')] |= $sub_delims;
$arr[ord(',')] |= $sub_delims;
$arr[ord(';')] |= $sub_delims;
$arr[ord('=')] |= $sub_delims;

# Now generate the C code

print <<EOF;
/*
 * WARNING: do not edit!
 * Generated by crypto/store/charmap.pl
 *
 * Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the OpenSSL license (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#define CHARTYPE_ALPHA          $ALPHA
#define CHARTYPE_DIGIT          $DIGIT
#define CHARTYPE_HEXDIG         $HEXDIG
#define CHARTYPE_unreserved     $unreserved
#define CHARTYPE_reserved       $reserved
#define CHARTYPE_gen_delims     $gen_delims
#define CHARTYPE_sub_delims     $sub_delims

#define is_valid(c)             ((unsigned char)(c) < 128)
#define is_type(c,t)            ((char_type[(size_t)(c)] & (t)) != 0)
#define is_ALPHA(c)             (is_type((c), CHARTYPE_ALPHA))
#define is_DIGIT(c)             (is_type((c), CHARTYPE_DIGIT))
#define is_HEXDIG(c)            (is_type((c), CHARTYPE_HEXDIG))
#define is_unreserved(c)        (is_type((c), CHARTYPE_unreserved))
#define is_reserved(c)          (is_type((c), CHARTYPE_reserved))
#define is_gen_delims(c)        (is_type((c), CHARTYPE_gen_delims))
#define is_sub_delims(c)        (is_type((c), CHARTYPE_sub_delims))

/*
 * Mask of various character properties
 */

static const unsigned short char_type[] = {
EOF

print "   ";
for($i = 0; $i < 128; $i++) {
    print("\n   ") if ($i && ($i % 12) == 0);
    printf(" %4d", $arr[$i]);
    print(",") if ($i != 127);
}
print("\n};\n");
