=head1 NAME

STORE_CTX, STORE_open, STORE_load, STORE_eof, STORE_close - Functions
to read objects from a URI

=head1 SYNOPSIS

 #include <openssl/store.h>
 
 typedef struct store_info_st STORE_INFO;
 typedef struct store_ctx_st STORE_CTX;

 STORE_CTX *STORE_open(const char *uri, pem_password_cb *pw_callback,
                       void *pw_callback_data);
 STORE_INFO *STORE_load(STORE_CTX *ctx);
 int STORE_eof(STORE_CTX *ctx);
 int STORE_close(STORE_CTX *ctx);

 int STORE_INFO_get_type(const STORE_INFO *store_info);
 const char *STORE_INFO_get0_NAME(const STORE_INFO *store_info);
 const EVP_PKEY *STORE_INFO_get0_PKEY(const STORE_INFO *store_info);
 const X509 *STORE_INFO_get0_CERT(const STORE_INFO *store_info);
 const X509_CRL *STORE_INFO_get0_CRL(const STORE_INFO *store_info);

 const char *STORE_INFO_type_string(int type);

 void STORE_INFO_free(STORE_INFO *store_info);

=head1 DESCRIPTION

These functions help the application to fetch supported objects (see
L</SUPPORTED OBJECTS> for information on which those are) from a given
URI (see L</SUPPORTED SCHEMES> for more information on the supported
URI schemes).
The general method to do so is to "open" the URI using STORE_open(),
read each available and supported object using STORE_load() as long as
STORE_eof() hasn't been reached, and finish it off with STORE_close().

The retrieved information is store in a B<STORE_INFO>, from which the
OpenSSL type object can be extracted using one of
STORE_INFO_get0_TYPE(), after which the B<STORE_INFO> should be freed
with STORE_INFO_free().

=head2 Types

B<STORE_INFO> is an opaque type that's just an intermediary holder for
the objects that have been retrieved.  See L</SUPPORTED OBJECTS> for
more information on the types that are supported.

B<STORE_CTX> is a context variable that holds all the internal
information for STORE_open(), STORE_load(), STORE_eof() and
STORE_close() to work together.

=head2 Functions

STORE_open() takes a URI B<uri> and the same password callback and
associated data as B<pw_callback> and B<pw_callback_data>, opens a
channel to the data located at that URI and returns a B<STORE_CTX>
with all necessary information.  The given B<pw_callback> and
B<pw_callback_data> will be reused by all functions that use
B<STORE_CTX> when a password is needed.

STORE_eof() takes a B<STORE_CTX> and checks if we've reached the end
of data.

STORE_load() takes a B<STORE_CTX>, tries to load the next available
object and return it wrapped with  B<STORE_INFO>.

STORE_load() takes a B<STORE_CTX>, closes the channel that was opened
by STORE_open() and frees all other information that was stored in the
B<STORE_CTX>, as well as the B<STORE_CTX> itself.

STORE_INFO_get_type() takes a B<STORE_INFO> and returns the STORE type
number for the object inside.
STORE_INFO_get_type_string() takes a STORE type number and returns a
short string describing it.

STORE_INFO_get0_NAME(), STORE_INFO_get0_PKEY(), STORE_INFO_get0_CERT()
and STORE_INFO_get0_CRL() all take a B<STORE_INFO> and return the
wrapped object of the appropriate OpenSSL type provided that's what's
wrapped.

STORE_INFO_free() frees a B<STORE_INFO>.

=head1 SUPPORTED SCHEMES

The basic supported scheme is B<file:>.
Any other scheme can be added dynamically, using
STORE_register_loader().

The B<file:> scheme is a bit complex, as it has to support PEM file,
raw DER files as well as PKCS#8 and PKCS#12 formated containers.
There is a set of handlers for those types, more can be added
dynamically using STORE_FILE_register_handler().

=head1 SUPPORTED OBJECTS

Currently supported object types are, in STORE object types:

=over 4

=item STORE_INFO_NAME

A name is exactly that, a name.  It's like a name in a directory, but
adapted for each scheme.
The goal is that for a URI C<file:/foo/bar/> and a name C<cookie.pem>,
one should simply be able to add the name to the URI
(C<file:/foo/bar/cookie.pem>) to get the objects in that file.  This
can be applied to all schemes that can somehow support a listing of
object names.

=item STORE_INFO_PKEY

A private/public key of some sort.

=item STORE_INFO_CERT

A X.509 certificate.

=item STORE_INFO_CRL

A X.509 certificate reocation list.

=back

=head1 RETURN VALUES

STORE_open() returns a pointer to a B<STORE_CTX> on success, B<NULL>
on failure.

STORE_load() returns a pointer to a B<STORE_INFO> on success, B<NULL>
on failure.

STORE_eof() returns 1 if the end of data has been reached, otherwise
0.

STORE_close() returns 1 on success, 0 on failure.

STORE_INFO_get_type() returns the STORE type number of the given
B<STORE_INFO>.  There is no error value.

STORE_INFO_get0_NAME(), STORE_INFO_get0_PKEY(), STORE_INFO_get0_CERT()
and STORE_INFO_get0_CRL() all return a pointer to the OpenSSL object
on success, NULL otherwise.

STORE_INFO_type_string() returns a string on success, B<NULL> on
failure.

=head1 SEE ALSO

L<STORE_register_loader(3)>, L<STORE_FILE_register_handler(3)>

=head1 COPYRIGHT

Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
