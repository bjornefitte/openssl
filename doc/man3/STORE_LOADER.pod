=pod

=head1 NAME

STORE_LOADER, STORE_LOADER_CTX, STORE_LOADER_new, STORE_LOADER_set0_scheme,
STORE_LOADER_set_open, STORE_LOADER_set_load, STORE_LOADER_set_eof,
STORE_LOADER_set_close, STORE_LOADER_free, STORE_register_loader,
STORE_unregister_loader, STORE_open_fn, STORE_load_fn, STORE_eof_fn,
STORE_close_fn - Types and functions to manipulate, register and
unregister STORE loaders for different URI schemes

=head1 SYNOPSIS

 #include <openssl/store.h>

 typedef struct store_loader_st STORE_LOADER;
 STORE_LOADER *STORE_LOADER_new(void);
 int STORE_LOADER_set0_scheme(STORE_LOADER *store_loader, const char *scheme);
 /* struct store_loader_st is defined differently by each loader */
 typedef struct store_loader_ctx_st STORE_LOADER_CTX;
 typedef STORE_LOADER_CTX *(*STORE_open_fn)(const char *authority,
                                            const char *path,
                                            const char *query,
                                            const char *fragment);
 int STORE_LOADER_set_open(STORE_LOADER *store_loader,
                           STORE_open_fn store_open_function);
 typedef STORE_INFO *(*STORE_load_fn)(STORE_LOADER_CTX *ctx,
                                      UI_METHOD *ui_method, void *ui_data);
 int STORE_LOADER_set_load(STORE_LOADER *store_loader,
                           STORE_load_fn store_load_function);
 typedef int (*STORE_eof_fn)(STORE_LOADER_CTX *ctx);
 int STORE_LOADER_set_eof(STORE_LOADER *store_loader,
                            STORE_eof_fn store_eof_function);
 typedef int (*STORE_close_fn)(STORE_LOADER_CTX *ctx);
 int STORE_LOADER_set_close(STORE_LOADER *store_loader,
                            STORE_close_fn store_close_function);
 int STORE_LOADER_free(STORE_LOADER *store_loader);
 
 int STORE_register_loader(STORE_LOADER *loader);
 STORE_LOADER *STORE_unregister_loader(const char *scheme);

=head1 DESCRIPTION

These functions help applications and engines to create loaders for
schemes they support.

=head2 Types

B<STORE_LOADER> is the type to hold a loader.  It contains a scheme
and the functions needed to implement STORE_open(), STORE_eof(),
STORE_load() and STORE_close() for this scheme.

B<STORE_LOADER_CTX> is an type template, to be defined by each loader
using B<struct store_loader_ctx_st { ... }>.

B<STORE_open_fn>, B<STORE_load_fn>, B<STORE_eof_fn> and
B<STORE_close_fn> are the function pointer types used within a STORE
loader.

=head2 Functions

STORE_LOADER_new() creates a new B<STORE_LOADER>.

STORE_LOADER_set0_scheme() sets the scheme of the B<store_loader>.

STORE_LOADER_set_open() sets the opener function for the
B<store_loader>.

STORE_LOADER_set_load() sets the loader function for the
B<store_loader>.

STORE_LOADER_set_eof() sets the end of file checker function for the
B<store_loader>.

STORE_LOADER_set_close() sets the closing function for the
B<store_loader>.

STORE_LOADER_free() frees the given B<store_loader>.

STORE_register_loader() register the given B<store_loader> and thereby
makes it available for use with STORE_open(), STORE_load(),
STORE_eof() and STORE_close().

STORE_unregister_loader() unregister the store loader for the given
B<scheme>.

=head1 NOTES

The B<file:> scheme has built in support.

=head1 RETURN VALUES

The functions with the types B<STORE_open_fn>, B<STORE_load_fn>,
B<STORE_eof_fn> and B<STORE_close_fn> have same return values as
STORE_open(), STORE_load(), STORE_eof() and STORE_close,
respectively.

STORE_LOADER_new() returns a pointer to a B<STORE_LOADER> on success,
B<NULL> on failure.

STORE_LOADER_set0_scheme(), STORE_LOADER_set_open(),
STORE_LOADER_set_load(), STORE_LOADER_set_eof() and
STORE_LOADER_set_close() return 1 on success, 0 on failure.

STORE_LOADER_free() returns 1 on success, 0 on failure.

STORE_register_loader() returns 1 on success, 0 on failure.

STORE_unregister_loader() returns the unregistered loader on success,
B<NULL> on failure.

=head1 SEE ALSO

L<STORE_open(3)>

=head1 COPYRIGHT

Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
