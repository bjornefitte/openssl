=pod

=head1 NAME

STORE_INFO, STORE_INFO_get_type, STORE_INFO_get0_NAME,
STORE_INFO_get0_PARAMS, STORE_INFO_get0_PKEY, STORE_INFO_get0_CERT,
STORE_INFO_get0_CRL, STORE_INFO_type_string, STORE_INFO_free,
STORE_INFO_new_NAME, STORE_INFO_new_PARAMS, STORE_INFO_new_PKEY,
STORE_INFO_new_CERT, STORE_INFO_new_CRL - Functions to manipulate
STORE_INFO objects

=head1 SYNOPSIS

 #include <openssl/store.h>
 
 typedef struct store_info_st STORE_INFO;

 int STORE_INFO_get_type(const STORE_INFO *store_info);
 const char *STORE_INFO_get0_NAME(const STORE_INFO *store_info);
 DSA *STORE_INFO_get0_PARAMS(const STORE_INFO *store_info);
 EVP_PKEY *STORE_INFO_get0_PKEY(const STORE_INFO *store_info);
 X509 *STORE_INFO_get0_CERT(const STORE_INFO *store_info);
 X509_CRL *STORE_INFO_get0_CRL(const STORE_INFO *store_info);

 const char *STORE_INFO_type_string(int type);

 void STORE_INFO_free(STORE_INFO *store_info);

 STORE_INFO *STORE_INFO_new_NAME(char *name);
 STORE_INFO *STORE_INFO_new_PARAMS(DSA *dsa_params);
 STORE_INFO *STORE_INFO_new_PKEY(EVP_PKEY *pkey);
 STORE_INFO *STORE_INFO_new_CERT(X509 *x509);
 STORE_INFO *STORE_INFO_new_CRL(X509_CRL *crl);

=head1 DESCRIPTION

These functions are primarly useful for applications to retrieve
supported objects from B<STORE_INFO> objects and for scheme specific
loaders to create B<STORE_INFO> holders.

=head2 Types

B<STORE_INFO> is an opaque type that's just an intermediary holder for
the objects that have been retrieved by STORE_load() and similar
functions.
Supported OpenSSL type object can be extracted using one of
STORE_INFO_get0_TYPE(), after which the B<STORE_INFO> should be freed
with STORE_INFO_free().
See L</SUPPORTED OBJECTS> for more information on the types that are
supported.

=head2 Functions

STORE_INFO_get_type() takes a B<STORE_INFO> and returns the STORE type
number for the object inside.
STORE_INFO_get_type_string() takes a STORE type number and returns a
short string describing it.

STORE_INFO_get0_NAME(), STORE_INFO_get0_PARAMS(),
STORE_INFO_get0_CERT() and STORE_INFO_get0_CRL() all take a
B<STORE_INFO> and return the held object of the appropriate OpenSSL
type provided that's what's held.

STORE_INFO_free() frees a B<STORE_INFO>.

STORE_INFO_new_NAME(), STORE_INFO_new_PARAMS(), STORE_INFO_new_PKEY(),
STORE_INFO_new_CERT() and STORE_INFO_new_CRL() create a B<STORE_INFO>
object to hold the given input object.

=head1 SUPPORTED OBJECTS

Currently supported object types are, in STORE object types:

=over 4

=item STORE_INFO_NAME

A name is exactly that, a name.  It's like a name in a directory, but
adapted for each scheme.
The goal is that for a URI C<file:/foo/bar/> and a name C<cookie.pem>,
one should simply be able to add the name to the URI
(C<file:/foo/bar/cookie.pem>) to get the objects in that file.  This
can be applied to all schemes that can somehow support a listing of
object names.

=item STORE_INFO_PARAMS

Key parameters.

=item STORE_INFO_PKEY

A private/public key of some sort.

=item STORE_INFO_CERT

A X.509 certificate.

=item STORE_INFO_CRL

A X.509 certificate reocation list.

=back

=head1 RETURN VALUES

STORE_INFO_get_type() returns the STORE type number of the given
B<STORE_INFO>.  There is no error value.

STORE_INFO_get0_NAME(), STORE_INFO_get0_PARAMS(),
STORE_INFO_get0_PKEY(), STORE_INFO_get0_CERT()
and STORE_INFO_get0_CRL() all return a pointer to the OpenSSL object
on success, NULL otherwise.

STORE_INFO_type_string() returns a string on success, B<NULL> on
failure.

STORE_INFO_new_NAME(), STORE_INFO_new_PARAMS(), STORE_INFO_new_PKEY(),
STORE_INFO_new_CERT() and STORE_INFO_new_CRL() return a B<STORE_INFO>
pointer on success or B<NULL> on failure.

=head1 SEE ALSO

L<STORE_open(3)>, L<STORE_register_loader(3)>

=head1 COPYRIGHT

Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
